module main(SW, KEY, CLOCK_50, LEDR);
    input [2:0]SW;
    input [1:0]KEY;
    input CLOCK_50;

    output reg [0:0]LEDR;

    reg index = 2'd0; // index to go through sequence
    wire enable; // 2Hz clock pulse generated for 0.5 period

    wire [26:0] half_sec_timer = 27'b001011111010111100001000000; // 0.5 sec count (2Hz)
    reg [26:0] counter;

    reg [12:0]sequence; // Morse Code Data
    always@(*)
        begin
            case(SW)
                3'b000: sequence = 13'b1010000000000; //I
                3'b001: sequence = 13'b1011101110111; //J
                3'b010: sequence = 13'b1110111010000; //K
                3'b011: sequence = 13'b1011101010000; //L
                3'b100: sequence = 13'b1110111000000; //M
                3'b101: sequence = 13'b1110100000000; //N
                3'b110: sequence = 13'b1110111011100; //O
                3'b111: sequence = 13'b1011101110100; //P
                default: sequence = 13'b0;
            endcase
        end

    always@(posedge enable) // 2Hz rising edge
        begin
        LEDR[0] = sequence[index]; // Display sequence
        index = index + 1; //Increment
        /*
        LEDR[0] = sequence[12]; // Display sequence
        sequence = sequence*2; // Shift Left
        */
        end
    
    // Generate 2Hz clock
    assign enable = (counter == 27'b000000000000000000000000000) ? 1 : 0;
    always@(posedge CLOCK_50)
        begin
            if (counter >= half_sec_timer)
                counter <= 27'b000000000000000000000000000;
            else
                counter <= counter + 1;
        end
endmodule